var ReactHammer=function(){"use strict";function e(e,n){n.hasOwnProperty("vertical")&&console.warn("vertical is deprecated, please use `direction` instead");var o=n.direction;if(o||n.hasOwnProperty("vertical")){var i=o||(n.vertical?"DIRECTION_ALL":"DIRECTION_HORIZONTAL");e.get("pan").set({direction:Hammer[i]}),e.get("swipe").set({direction:Hammer[i]})}n.options&&Object.keys(n.options).forEach(function(t){if("recognizers"===t)Object.keys(n.options.recognizers).forEach(function(t){var o=e.get(t);o.set(n.options.recognizers[t]),n.options.recognizers[t].requireFailure&&o.requireFailure(n.options.recognizers[t].requireFailure)},this);else{var o={};o[t]=n.options[t],e.set(o)}},this),n.recognizeWith&&Object.keys(n.recognizeWith).forEach(function(t){e.get(t).recognizeWith(n.recognizeWith[t])},this),Object.keys(n).forEach(function(o){var i=t[o];i&&(e.off(i),e.on(i,n[o]))})}var n={children:!0,direction:!0,options:!0,recognizeWith:!0,vertical:!0},t={action:"tap press",onDoubleTap:"doubletap",onPan:"pan",onPanCancel:"pancancel",onPanEnd:"panend",onPanMove:"panmove",onPanStart:"panstart",onPinch:"pinch",onPinchCancel:"pinchcancel",onPinchEnd:"pinchend",onPinchIn:"pinchin",onPinchOut:"pinchout",onPinchStart:"pinchstart",onPress:"press",onPressUp:"pressup",onRotate:"rotate",onRotateCancel:"rotatecancel",onRotateEnd:"rotateend",onRotateMove:"rotatemove",onRotateStart:"rotatestart",onSwipe:"swipe",onSwipeRight:"swiperight",onSwipeLeft:"swipeleft",onSwipeUp:"swipeup",onSwipeDown:"swipedown",onTap:"tap"};return Object.keys(t).forEach(function(e){n[e]=!0}),React.createClass({displayName:"Hammer",propTypes:{className:React.PropTypes.string},componentDidMount:function(){this.hammer=new Hammer(this.domElement),e(this.hammer,this.props)},componentDidUpdate:function(){this.hammer&&e(this.hammer,this.props)},componentWillUnmount:function(){this.hammer&&(this.hammer.stop(),this.hammer.destroy()),this.hammer=null},render:function(){var e={};Object.keys(this.props).forEach(function(t){n[t]||(e[t]=this.props[t])},this);var t=this;return e.ref=function(e){t.props.ref&&t.props.ref(e),t.domElement=e},React.cloneElement(React.Children.only(this.props.children),e)}})}();
